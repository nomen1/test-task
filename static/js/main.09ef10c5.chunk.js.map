{"version":3,"sources":["App/App.js","api.js","redux/appReducer.js","App/AppContainer.js","serviceWorker.js","redux/store.js","index.js","App/App.module.css"],"names":["App","props","data","list","Object","keys","map","key","className","s","listContainer","container","dataAPI","axios","get","initialState","connect","state","app","dispatch","getData","a","response","console","log","type","rates","useEffect","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"yOAGaA,EAAM,SAACC,GAAW,IACrBC,EAASD,EAATC,KAEFC,EAAOC,OAAOC,KAAKH,GAAMI,KAAI,SAACC,GAAD,OACjC,yBAAKC,UAAWC,IAAEC,cAAeH,IAAKA,GACpC,8BAAOA,GADT,IACqB,8BAAOL,EAAKK,QAInC,OAAO,yBAAKC,UAAWC,IAAEE,WAAYR,I,wDCV1BS,EAAU,WAEnB,OAAOC,IAAMC,IAAI,iDCkBfC,EAAe,CACjBb,KAAM,MCQKc,eAbS,SAACC,GACvB,MAAO,CACLf,KAAMe,EAAMC,IAAIhB,SAGO,SAACiB,GAC1B,MAAO,CACLC,QAAS,WACPD,EDZJ,uCAAO,WAAOA,GAAP,eAAAE,EAAA,sEACgBT,IADhB,OACDU,EADC,OAELC,QAAQC,IAAIF,GACZH,EAVK,CACLM,KAPa,WAQbvB,KAQiBoB,EAASpB,KAAKwB,QAH1B,2CAAP,2DCiBaV,EAzBM,SAACf,GAAW,IACvBmB,EAAkBnB,EAAlBmB,QAASlB,EAASD,EAATC,KAMjB,OAJAyB,qBAAU,WACRP,MACC,IAGD,6BAAc,MAARlB,EAAe,+CAA4B,kBAAC,EAAQD,OCF1C2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCZAC,EAAWC,YAAgB,CAC/BhB,IHuBwB,WAAmC,IAAlCD,EAAiC,uDAAzBF,EAAcoB,EAAW,uCAC1D,OAAQA,EAAOV,MACb,IA/Ba,WAgCX,OAAO,2BACFR,GADL,IAEEf,KAAMiC,EAAOjC,OAGjB,QACE,OAAOe,MG5BAmB,EAAQC,YACjBJ,EACAK,YAAgBC,MCLpBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a,kBGxI5BC,EAAOC,QAAU,CAAC,UAAY,uBAAuB,cAAgB,8B","file":"static/js/main.09ef10c5.chunk.js","sourcesContent":["import React from \"react\";\nimport s from \"./App.module.css\";\n\nexport const App = (props) => {\n  const { data } = props;\n\n  const list = Object.keys(data).map((key) => (\n    <div className={s.listContainer} key={key}>\n      <span>{key}</span> <span>{data[key]}</span>\n    </div>\n  ));\n\n  return <div className={s.container}>{list}</div>;\n};\n\n","import axios from \"axios\";\r\n\r\nexport const dataAPI = {\r\n  getData() {\r\n    return axios.get(\"https://nomen1.github.io/test-task/data.json\");\r\n  }\r\n};\r\n","import { dataAPI } from \"./../api\";\r\nconst SET_DATA = \"SET_DATA\";\r\n\r\n\r\n\r\n\r\nexport const setData = (data) => {\r\n  return {\r\n    type: SET_DATA,\r\n    data\r\n  };\r\n};\r\n\r\nexport const getData = () => {\r\n  return async (dispatch) => {\r\n    let response = await dataAPI.getData();\r\n    console.log(response);\r\n    dispatch(setData(response.data.rates));\r\n  };\r\n};\r\n\r\n\r\nconst initialState = {\r\n    data: null\r\n  };\r\n\r\n\r\n\r\n\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_DATA:\r\n      return {\r\n        ...state,\r\n        data: action.data\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n","import { App } from \"./App\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { getData } from \"./../redux/appReducer\";\r\n\r\nconst AppContainer = (props) => {\r\n  const { getData, data } = props;\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>{data == null ? <div> wait, please </div> : <App {...props} />}</div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.app.data\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getData: () => {\r\n      dispatch(getData());\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport {appReducer} from \"./appReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n  app: appReducer\r\n \r\n});\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunkMiddleware)\r\n  );\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppContainer from \"./App/AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3HXHM\",\"listContainer\":\"App_listContainer__1a4Gr\"};"],"sourceRoot":""}